import os

tools = ['gcc', 'g++', 'ar']

def ProgAndHex(env, target, source):
    env['HEXSUFFIX'] = '.hex'
    elffile = env.Program(
        target = target,
        source = source
    )
    hexfile = env.Command(target, source, "$OBJCOPY -O ihex $TARGET$PROGSUFFIX $TARGET$HEXSUFFIX")
    #print env.Dump()
    Depends( hexfile, elffile )
    return elffile

AddMethod(Environment, ProgAndHex)
env = Environment(ENV = os.environ)

env['CC']           = 'arm-none-eabi-gcc'
env['CXX']          = 'arm-none-eabi-c++'
env['AS']           = 'arm-none-eabi-as'
env['AR']           = 'arm-none-eabi-ar'
env['LD']           = 'arm-none-eabi-ld'
env['NM']           = 'arm-none-eabi-nm'
env['OBJDUMP']      = 'arm-none-eabi-objdump'
env['OBJCOPY']      = 'arm-none-eabi-objcopy'
env['SIZE']         = 'arm-none-eabi-size'
env['RANLIB']       = 'arm-none-eabi-ranlib'
env['PROGSUFFIX']   = '.elf'

# include locations
env['CPPPATH'] = [
    '.',
    '../../core/include/',
    '../../core/include/cmsis',
    '../../core/include/mcu'
    ]

env['CCFLAGS'] = ['-O2',
                  '-Wall',
                  '-mlittle-endian',
                  '-mthumb',
                  '-mcpu=cortex-m0',
                  '-mthumb-interwork',
                  '-ffreestanding',
                  '-nostdlib']

env['LINKFLAGS'] = ['-mlittle-endian',
                    '-mthumb',
                    '-mcpu=cortex-m0',
                    '-mthumb-interwork',
                    '-Tblinky_gcc_nrf51.ld']

# defines
env['CPPDEFINES'] = [
    'NRF_MCU=NRF52832'
]

env.ProgAndHex(
    target = 'core',
    source = [
        'main.c',
        '../../core/mcu/gcc/gcc_startup_nrf51.S',
        '../../core/mcu/system_nrf51.c'
    ]
)
